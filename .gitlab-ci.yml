variables:
  GIT_SUBMODULE_STRATEGY: recursive
  SPACK_VERSION: v0.23.0

stages:
  - versioning
  - prepare
  - lint
  - build
  - package
  - publish
  - scan
  - pages

default:
  tags:
    - ska-default

# The 'IMAGE' variables allow reusing docker images between different pipelines.
# See https://confluence.skatelescope.org/display/SE/Caching+Docker+images+using+GitLab+CI+registry
versioning:
  stage: versioning
  image: bitnami/git
  script:
    # Unshallowing ensures that 'git log' works
    - git fetch --unshallow
    - echo IMAGE_ROCKYLINUX=${CI_REGISTRY_IMAGE}/rockylinux:$(git log -n 1 --pretty=format:%H -- os/rockylinux.dockerfile)-${SPACK_VERSION} > versions.env
    - echo IMAGE_UBUNTU=${CI_REGISTRY_IMAGE}/ubuntu:$(git log -n 1 --pretty=format:%H -- os/ubuntu.dockerfile)-${SPACK_VERSION} >> versions.env
    - cat versions.env
  artifacts:
    reports:
      dotenv: versions.env


.prepare:
  stage: prepare
  needs: ["versioning"]
  image: docker:stable
  variables:
    # Makes 'docker manifest' work:
    DOCKER_CLI_EXPERIMENTAL: enabled
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      if ! docker manifest inspect $DOCKER_IMAGE > /dev/null || [ "$BUILD_DOCKER_IMAGE" = "1" ]; then
        if [ "$BUILD_DOCKER_IMAGE" = "1" ]; then
          DOCKER_CACHE_PARAMETERS="--no-cache"
        else
          DOCKER_CACHE_PARAMETERS=""
        fi
        docker build $DOCKER_BUILD_ARG ${DOCKER_CACHE_PARAMETERS} \
            --build-arg SPACK_VERSION=${SPACK_VERSION} \
            --tag $DOCKER_IMAGE -f $DOCKER_FILE .
        docker push $DOCKER_IMAGE
      fi
  services:
    - docker:stable-dind

prepare-spackrocky:
  extends: .prepare
  variables:
    DOCKER_IMAGE: ${IMAGE_ROCKYLINUX}
    DOCKER_FILE: os/rockylinux.dockerfile

prepare-spackubuntu:
  extends: .prepare
  variables:
    DOCKER_IMAGE: ${IMAGE_UBUNTU}
    DOCKER_FILE: os/ubuntu.dockerfile


.build:
  stage: build
  script:
    - . /opt/spack/share/spack/setup-env.sh
    - spack find -v -l
    - spack env activate ./os
    - spack mirror add --autopush --unsigned --oci-username $CI_REGISTRY_USER --oci-password-variable CI_REGISTRY_PASSWORD gitlab-mirror oci://$CI_REGISTRY_IMAGE/spack-buildcache
    # Should push to buildcache automatically via --autopush above
    - spack install --use-cache --no-check-signature
  # Retry on timeout, the buildcache should make retries faster.
  retry:
    max: 1
    when: job_execution_timeout

build-rockylinux:
  needs: ["versioning", "prepare-spackrocky"]
  image: ${IMAGE_ROCKYLINUX}
  extends: .build

build-ubuntu:
  needs: ["versioning", "prepare-spackubuntu"]
  image: ${IMAGE_UBUNTU}
  extends: .build

build-aws:
  stage: build
  image: ${IMAGE_UBUNTU}
  script:
    - . /opt/spack/share/spack/setup-env.sh
    - spack bootstrap now
    - spack find -v -l
    - spack env activate ./env/aws
    - spack mirror add --autopush --unsigned --oci-username $CI_REGISTRY_USER --oci-password-variable CI_REGISTRY_PASSWORD gitlab-mirror-push oci://$CI_REGISTRY_IMAGE/spack-buildcache
    # Should push to buildcache automatically via --autopush above
    - spack install --use-cache

deploy-aws:
  stage: publish
  dependencies: []
  tags: 
    - aws-deploy
  script:
    - spack -e env/aws install --cache-only --only-concrete
  # Access control
  environment:
    name:  aws-dp-modules
  rules:
  - if: $CI_COMMIT_REF_PROTECTED == "true"
    when: manual
    allow_failure: true
  - when: never

# Creates a Dockerfile for building an image containing the Spack tools.
# The {OCI_PASSWORD} still needs to be replaced in the generated Dockerfile.
create-dockerfile:
  stage: prepare
  needs: ["versioning", "prepare-spackubuntu"]
  image: ${IMAGE_UBUNTU}
  script:
    - . /opt/spack/share/spack/setup-env.sh
    - spack -e os repo remove ska-sdp-spack
    - (cd os && spack containerize > ../images/ska-sdp-spack/Dockerfile)
    - cd images/ska-sdp-spack
    - spack --version
    # Add ska-sdp-spack repo and the GitLab buildcache (note that we
    # don't need OCI credentials for reading from the cache).
    - |
      cat > Dockerfile.additions <<END
      COPY . /opt/ska-sdp-spack
      RUN spack --version
      RUN spack repo add /opt/ska-sdp-spack
      RUN spack mirror add --unsigned gitlab-mirror oci://$CI_REGISTRY_IMAGE/spack-buildcache
      END
    - sed -i "/FROM spack/r Dockerfile.additions" Dockerfile
    # Verify that Spack creates an Ubuntu 22.04 image.
    # (If spack.yaml changes, you need to update this part as well.)
    - |
      if ! grep -q "FROM ubuntu:22.04" Dockerfile; then
        echo Spack target image does not match container:images:os setting in spack.yaml.
        exit 1
      fi
    # Use ska-base image instead of plain ubuntu 22.04 image.
    - sed -i "s=FROM ubuntu:22.04=FROM artefact.skao.int/ska-base:0.1.0=" Dockerfile
    - cat Dockerfile
  artifacts:
    paths:
      - images/ska-sdp-spack/Dockerfile

include:
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/finaliser.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/oci-image.gitlab-ci.yml"
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/release.gitlab-ci.yml"

# Override some parts of the oci jobs:
# - Make them use the Dockerfile from the create-dockerfile job.
# - Override the Dockerfile detection rules, since CI creates it on the fly.
oci-image-lint:
  needs: ["create-dockerfile"]

oci-image-build:
  # The dependency on build-ubuntu ensures that the buildcache has all packages.
  needs: ["create-dockerfile","oci-image-lint","build-ubuntu"]
  variables:
    OCI_IMAGE_BUILD_CONTEXT: $CI_PROJECT_DIR
